services:
  # Traefik reverse proxy with Let's Encrypt
  traefik:
    image: traefik:v3.0
    container_name: dora-traefik
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"  # Traefik dashboard
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./traefik-data:/data
    command:
      - --api.dashboard=true
      - --api.insecure=true
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false
      - --entrypoints.web.address=:80
      - --entrypoints.websecure.address=:443
      - --certificatesresolvers.letsencrypt.acme.tlschallenge=true
      - --certificatesresolvers.letsencrypt.acme.email=g.evstratov@gmail.com
      - --certificatesresolvers.letsencrypt.acme.storage=/data/acme.json
      - --certificatesresolvers.letsencrypt.acme.httpchallenge=true
      - --certificatesresolvers.letsencrypt.acme.httpchallenge.entrypoint=web
      - --global.checkNewVersion=false
      - --global.sendAnonymousUsage=false
    networks:
      - dora-network
    labels:
      - "traefik.enable=true"
      # Dashboard
      - "traefik.http.routers.traefik.rule=Host(`al-vizier.haet.ru`) && (PathPrefix(`/api`) || PathPrefix(`/dashboard`))"
      - "traefik.http.routers.traefik.tls=true"
      - "traefik.http.routers.traefik.tls.certresolver=letsencrypt"
      - "traefik.http.routers.traefik.service=api@internal"
      # HTTP to HTTPS redirect
      - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"
      - "traefik.http.routers.redirect-https.rule=hostregexp(`{host:.+}`)"
      - "traefik.http.routers.redirect-https.entrypoints=web"
      - "traefik.http.routers.redirect-https.middlewares=redirect-to-https"

  # HTTP Server
  http-server:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: dora-http-server
    env_file:
      - .env
    environment:
      - MEMORY_CACHE_ENABLED=true
      - MEMORY_CACHE_PATH=/app/cache/dora_memory.db
      - MEMORY_CACHE_TTL_DAYS=7
      - MEMORY_CACHE_MAX_SIZE_MB=100
      - LOG_LEVEL=INFO
      - ENABLE_TRACING=true
      - HTTP_ENABLED=true
      - HTTP_HOST=0.0.0.0
      - HTTP_PORT=8000
    volumes:
      - ./cache:/app/cache
      - ./logs:/app/logs
    restart: unless-stopped
    networks:
      - dora-network
    expose:
      - "8000"
    command: ["uv", "run", "python", "run_http_server.py"]
    healthcheck:
      test: ["CMD", "uv", "run", "python", "-c", "import urllib.request; urllib.request.urlopen('http://localhost:8000/health').read()"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.dora-api.rule=Host(`al-vizier.haet.ru`)"
      - "traefik.http.routers.dora-api.tls=true"
      - "traefik.http.routers.dora-api.tls.certresolver=letsencrypt"
      - "traefik.http.routers.dora-api.entrypoints=websecure"
      - "traefik.http.services.dora-api.loadbalancer.server.port=8000"
      # Basic auth middleware for /v1/chat/completions endpoint
      - "traefik.http.middlewares.dora-auth.basicauth.users=admin:$$2y$$10$$8K1p3kbJGmnCBBMJTlscUuezPCZJkp4I5JNGfJeRPSjhRu6XfLkhy"
      - "traefik.http.routers.dora-api-chat.rule=Host(`al-vizier.haet.ru`) && PathPrefix(`/v1/chat/completions`)"
      - "traefik.http.routers.dora-api-chat.tls=true"
      - "traefik.http.routers.dora-api-chat.tls.certresolver=letsencrypt"
      - "traefik.http.routers.dora-api-chat.entrypoints=websecure"
      - "traefik.http.routers.dora-api-chat.middlewares=dora-auth"
      - "traefik.http.routers.dora-api-chat.service=dora-api"

  # Main Telegram bot
  telegram-bot:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: dora-telegram-bot
    env_file:
      - .env
    environment:
      - MEMORY_CACHE_ENABLED=true
      - MEMORY_CACHE_PATH=/app/cache/dora_memory.db
      - MEMORY_CACHE_TTL_DAYS=7
      - MEMORY_CACHE_MAX_SIZE_MB=100
      - LOG_LEVEL=INFO
      - ENABLE_TRACING=true
      - HTTP_HOST=http-server
      - HTTP_PORT=8000
    volumes:
      - ./cache:/app/cache
      - ./logs:/app/logs
    restart: unless-stopped
    networks:
      - dora-network
    depends_on:
      http-server:
        condition: service_healthy
    command: ["uv", "run", "python", "run_bot.py"]


networks:
  dora-network:
    driver: bridge